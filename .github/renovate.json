{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ],
  "automerge": true,
  "branchPrefix": "deps/",
  "dependencyDashboard": true,
  "dependencyDashboardApproval": true,
  "dependencyDashboardTitle": "ðŸš€ Dependency Updates",
  "dependencyDashboardOSVVulnerabilitySummary": "none",
  "ignorePaths": [
    "apps/engine/**"
  ],
  "npm": {
    "minimumReleaseAge": "3 days"
  },
  "postUpdateOptions": [
    "yarnDedupeFewer"
  ],
  "rangeStrategy": "bump",
  "rebaseWhen": "conflicted",
  "semanticCommits": "disabled",
  "schedule": [
    "before 4am every weekday",
    "every weekend"
  ],
  "packageRules": [
    {
      "extends": [
        "packages:linters",
        "packages:test"
      ],
      "dependencyDashboardApproval": false
    },
    {
      "matchManagers": [
        "github-actions"
      ],
      "commitMessageTopic": "GitHub Action `{{depName}}`",
      "additionalBranchPrefix": "gha/",
      "pinDigests": true
    },
    {
      "matchManagers": [
        "docker-compose",
        "dockerfile"
      ],
      "commitMessageTopic": "Docker tag `{{depName}}`",
      "additionalBranchPrefix": "docker/"
    },
    {
      "matchManagers": [
        "npm"
      ],
      "commitMessageTopic": "npm package `{{depName}}`",
      "additionalBranchPrefix": "js/"
    },
    {
      "matchManagers": [
        "poetry"
      ],
      "commitMessageTopic": "Python package `{{depName}}`",
      "additionalBranchPrefix": "py/",
      "reviewers": [
        "team:Python"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "commitMessageTopic": "Rust crate `{{depName}}`",
      "additionalBranchPrefix": "rs/",
      "reviewers": [
        "team:Rust"
      ]
    },
    {
      "matchDepTypes": [
        "devDependencies"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^jest-/",
        "/jest$/",
        "/^prettier/",
        "/prettier$/",
        "!prettier-plugin-sql"
      ]
    },
    {
      "groupName": "Block Protocol npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^@blockprotocol//",
        "/^block-/",
        "/^blockprotocol$/",
        "/^create-block-app$/",
        "/^mock-block-dock$/"
      ]
    },
    {
      "groupName": "ESLint npm packages",
      "matchManagers": [
        "npm"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^@types/eslint/",
        "/^@typescript-eslint//",
        "/^eslint-/",
        "/eslint$/"
      ]
    },
    {
      "groupName": "GraphQL npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^@graphql//",
        "/^graphql-/",
        "/graphql$/"
      ]
    },
    {
      "groupName": "Jest npm packages",
      "matchManagers": [
        "npm"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^jest-/",
        "/jest$/"
      ]
    },
    {
      "groupName": "OpenTelemetry npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^@opentelemetry//"
      ]
    },
    {
      "groupName": "Playwright npm packages",
      "matchManagers": [
        "npm"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^@playwright//",
        "/^playwright-/",
        "/playwright$/"
      ]
    },
    {
      "groupName": "Prettier npm packages",
      "matchManagers": [
        "npm"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^prettier/",
        "/prettier$/",
        "!prettier-plugin-sql"
      ]
    },
    {
      "groupName": "ProseMirror npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^prosemirror/",
        "/prosemirror$/"
      ]
    },
    {
      "groupName": "Sentry npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^@sentry//"
      ]
    },
    {
      "groupName": "Signia npm packages",
      "matchManagers": [
        "npm"
      ],
      "matchPackageNames": [
        "/^@signia//"
      ]
    },
    {
      "groupName": "Pydantic Python packages",
      "matchManagers": [
        "poetry"
      ],
      "matchPackageNames": [
        "/^pydantic/"
      ]
    },
    {
      "matchManagers": [
        "poetry"
      ],
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/mypy/",
        "/ruff/",
        "/black/"
      ]
    },
    {
      "matchManagers": [
        "custom.regex"
      ],
      "matchDepNames": [
        "rust",
        "/(R|r)ust(-.+)?/"
      ],
      "separateMajorMinor": false,
      "fetchChangeLogs": "off",
      "commitMessageExtra": "to nightly-{{newVersion}}",
      "additionalBranchPrefix": "rs/",
      "reviewers": [
        "team:Rust"
      ],
      "dependencyDashboardApproval": false
    },
    {
      "matchManagers": [
        "custom.regex"
      ],
      "matchDepNames": [
        "rust",
        "/(R|r)ust(-.+)?/"
      ],
      "matchFileNames": [
        "libs/**"
      ],
      "groupName": "Rust libraries toolchains",
      "commitMessageTopic": "Rust toolchains for `/libs`"
    },
    {
      "matchManagers": [
        "custom.regex"
      ],
      "matchDepNames": [
        "rust",
        "/(R|r)ust(-.+)?/"
      ],
      "matchFileNames": [
        "apps/**"
      ],
      "groupName": "Rust applications toolchains",
      "commitMessageTopic": "Rust toolchains for `/apps`"
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`clap` Rust crates",
      "matchPackageNames": [
        "/^clap[-_]?/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`criterion` Rust crates",
      "dependencyDashboardApproval": false,
      "matchPackageNames": [
        "/^criterion[-_]?/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`futures` Rust crates",
      "matchPackageNames": [
        "/^futures[-_]?/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`opentelemetry` Rust crates",
      "matchPackageNames": [
        "/^opentelemetry[-_]?/",
        "/^tracing-opentelemetry$/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`postgres` Rust crates",
      "matchPackageNames": [
        "/^postgres[-_]?/",
        "/^tokio-postgres[-_]?/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`serde` Rust crates",
      "matchPackageNames": [
        "/^serde[-_]?/"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "groupName": "`tracing` Rust crates",
      "matchPackageNames": [
        "/^tracing[-_]?/",
        "!tracing-opentelemetry"
      ]
    },
    {
      "matchManagers": [
        "cargo"
      ],
      "matchFileNames": [
        "libs/error-stack/Cargo.toml"
      ],
      "matchPackageNames": [
        "anyhow"
      ],
      "enabled": false
    }
  ],
  "customManagers": [
    {
      "customType": "regex",
      "fileMatch": [
        "(^|/)rust-toolchain\\.toml?$"
      ],
      "matchStrings": [
        "channel\\s*=\\s*\"nightly-(?<currentValue>\\d+-\\d+-\\d+)\""
      ],
      "depNameTemplate": "rust",
      "packageNameTemplate": "rust-lang/rust-analyzer",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "regex:(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "(^|/)README\\.md$",
        "(^|/)src/lib\\.rs$"
      ],
      "matchStrings": [
        "https:\\/\\/img\\.shields\\.io\\/static\\/v1\\?label=Rust\\&message=\\d+\\.\\d+\\.\\d+\\/nightly-(?<currentValue>\\d+-\\d+-\\d+)\\&color=blue"
      ],
      "depNameTemplate": "rust",
      "packageNameTemplate": "rust-lang/rust-analyzer",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "regex:(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)"
    }
  ]
}
